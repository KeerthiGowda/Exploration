// Generated by gencpp from file scarab_msgs/MoveResult.msg
// DO NOT EDIT!


#ifndef SCARAB_MSGS_MESSAGE_MOVERESULT_H
#define SCARAB_MSGS_MESSAGE_MOVERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scarab_msgs
{
template <class ContainerAllocator>
struct MoveResult_
{
  typedef MoveResult_<ContainerAllocator> Type;

  MoveResult_()
    : final_status(0)  {
    }
  MoveResult_(const ContainerAllocator& _alloc)
    : final_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _final_status_type;
  _final_status_type final_status;


    enum { FINISHED = 0u };
     enum { TIMEOUT = 1u };
     enum { STUCK = 2u };
     enum { NOTREADY = 3u };
     enum { UNREACHABLE = 4u };
 

  typedef boost::shared_ptr< ::scarab_msgs::MoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scarab_msgs::MoveResult_<ContainerAllocator> const> ConstPtr;

}; // struct MoveResult_

typedef ::scarab_msgs::MoveResult_<std::allocator<void> > MoveResult;

typedef boost::shared_ptr< ::scarab_msgs::MoveResult > MoveResultPtr;
typedef boost::shared_ptr< ::scarab_msgs::MoveResult const> MoveResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scarab_msgs::MoveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scarab_msgs::MoveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace scarab_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'scarab_msgs': ['/home/aravind/catkin_ws_ite/devel/share/scarab_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::scarab_msgs::MoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scarab_msgs::MoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scarab_msgs::MoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scarab_msgs::MoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scarab_msgs::MoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scarab_msgs::MoveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scarab_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79b09be8622e2706904a1b48e955dad6";
  }

  static const char* value(const ::scarab_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79b09be8622e2706ULL;
  static const uint64_t static_value2 = 0x904a1b48e955dad6ULL;
};

template<class ContainerAllocator>
struct DataType< ::scarab_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scarab_msgs/MoveResult";
  }

  static const char* value(const ::scarab_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scarab_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
uint8 FINISHED=0      # Successfully reached goal\n\
uint8 TIMEOUT=1       # Took too long to reach goal\n\
uint8 STUCK=2         # Robot has not moved in a while\n\
uint8 NOTREADY=3      # Don't have all the data we need to move, check back soon!\n\
uint8 UNREACHABLE=4   # Goal is no longer reachable (e.g., due to map change)\n\
\n\
uint8 final_status    # Status of robot when action was ended\n\
";
  }

  static const char* value(const ::scarab_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scarab_msgs::MoveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.final_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scarab_msgs::MoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scarab_msgs::MoveResult_<ContainerAllocator>& v)
  {
    s << indent << "final_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.final_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARAB_MSGS_MESSAGE_MOVERESULT_H
