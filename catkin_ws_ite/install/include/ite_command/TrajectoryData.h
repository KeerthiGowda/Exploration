// Generated by gencpp from file ite_command/TrajectoryData.msg
// DO NOT EDIT!


#ifndef ITE_COMMAND_MESSAGE_TRAJECTORYDATA_H
#define ITE_COMMAND_MESSAGE_TRAJECTORYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace ite_command
{
template <class ContainerAllocator>
struct TrajectoryData_
{
  typedef TrajectoryData_<ContainerAllocator> Type;

  TrajectoryData_()
    : robot_poses()
    , sensor_poses()
    , total_info(0.0)
    , infos()  {
    }
  TrajectoryData_(const ContainerAllocator& _alloc)
    : robot_poses(_alloc)
    , sensor_poses(_alloc)
    , total_info(0.0)
    , infos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _robot_poses_type;
  _robot_poses_type robot_poses;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _sensor_poses_type;
  _sensor_poses_type sensor_poses;

   typedef double _total_info_type;
  _total_info_type total_info;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _infos_type;
  _infos_type infos;




  typedef boost::shared_ptr< ::ite_command::TrajectoryData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ite_command::TrajectoryData_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryData_

typedef ::ite_command::TrajectoryData_<std::allocator<void> > TrajectoryData;

typedef boost::shared_ptr< ::ite_command::TrajectoryData > TrajectoryDataPtr;
typedef boost::shared_ptr< ::ite_command::TrajectoryData const> TrajectoryDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ite_command::TrajectoryData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ite_command::TrajectoryData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ite_command

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ite_trajopt': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_trajopt/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ite_command': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_command/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::TrajectoryData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::TrajectoryData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::TrajectoryData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::TrajectoryData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::TrajectoryData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::TrajectoryData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ite_command::TrajectoryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f69a1bb71500cb87fbf01e2ad7a25b9";
  }

  static const char* value(const ::ite_command::TrajectoryData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f69a1bb71500cb8ULL;
  static const uint64_t static_value2 = 0x7fbf01e2ad7a25b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ite_command::TrajectoryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ite_command/TrajectoryData";
  }

  static const char* value(const ::ite_command::TrajectoryData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ite_command::TrajectoryData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] robot_poses\n\
geometry_msgs/Pose[] sensor_poses\n\
float64 total_info\n\
float64[] infos # Information\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ite_command::TrajectoryData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ite_command::TrajectoryData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_poses);
      stream.next(m.sensor_poses);
      stream.next(m.total_info);
      stream.next(m.infos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ite_command::TrajectoryData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ite_command::TrajectoryData_<ContainerAllocator>& v)
  {
    s << indent << "robot_poses[]" << std::endl;
    for (size_t i = 0; i < v.robot_poses.size(); ++i)
    {
      s << indent << "  robot_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_poses[i]);
    }
    s << indent << "sensor_poses[]" << std::endl;
    for (size_t i = 0; i < v.sensor_poses.size(); ++i)
    {
      s << indent << "  sensor_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_poses[i]);
    }
    s << indent << "total_info: ";
    Printer<double>::stream(s, indent + "  ", v.total_info);
    s << indent << "infos[]" << std::endl;
    for (size_t i = 0; i < v.infos.size(); ++i)
    {
      s << indent << "  infos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.infos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITE_COMMAND_MESSAGE_TRAJECTORYDATA_H
