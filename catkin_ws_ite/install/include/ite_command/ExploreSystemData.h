// Generated by gencpp from file ite_command/ExploreSystemData.msg
// DO NOT EDIT!


#ifndef ITE_COMMAND_MESSAGE_EXPLORESYSTEMDATA_H
#define ITE_COMMAND_MESSAGE_EXPLORESYSTEMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <ite_command/TeamActions.h>
#include <ite_command/InfoTraj.h>
#include <ite_command/InfoTraj.h>
#include <ite_command/InfoTraj.h>
#include <ite_command/InfoTraj.h>

namespace ite_command
{
template <class ContainerAllocator>
struct ExploreSystemData_
{
  typedef ExploreSystemData_<ContainerAllocator> Type;

  ExploreSystemData_()
    : header()
    , name()
    , local_planner()
    , pose()
    , global_actions()
    , global()
    , local()
    , global_remainder()
    , optimized()
    , optimize_local(false)
    , select_optimize(false)
    , optimization_duration(0.0)
    , total_duration(0.0)  {
    }
  ExploreSystemData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , local_planner(_alloc)
    , pose(_alloc)
    , global_actions(_alloc)
    , global(_alloc)
    , local(_alloc)
    , global_remainder(_alloc)
    , optimized(_alloc)
    , optimize_local(false)
    , select_optimize(false)
    , optimization_duration(0.0)
    , total_duration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _local_planner_type;
  _local_planner_type local_planner;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::ite_command::TeamActions_<ContainerAllocator>  _global_actions_type;
  _global_actions_type global_actions;

   typedef  ::ite_command::InfoTraj_<ContainerAllocator>  _global_type;
  _global_type global;

   typedef  ::ite_command::InfoTraj_<ContainerAllocator>  _local_type;
  _local_type local;

   typedef  ::ite_command::InfoTraj_<ContainerAllocator>  _global_remainder_type;
  _global_remainder_type global_remainder;

   typedef  ::ite_command::InfoTraj_<ContainerAllocator>  _optimized_type;
  _optimized_type optimized;

   typedef uint8_t _optimize_local_type;
  _optimize_local_type optimize_local;

   typedef uint8_t _select_optimize_type;
  _select_optimize_type select_optimize;

   typedef double _optimization_duration_type;
  _optimization_duration_type optimization_duration;

   typedef double _total_duration_type;
  _total_duration_type total_duration;




  typedef boost::shared_ptr< ::ite_command::ExploreSystemData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ite_command::ExploreSystemData_<ContainerAllocator> const> ConstPtr;

}; // struct ExploreSystemData_

typedef ::ite_command::ExploreSystemData_<std::allocator<void> > ExploreSystemData;

typedef boost::shared_ptr< ::ite_command::ExploreSystemData > ExploreSystemDataPtr;
typedef boost::shared_ptr< ::ite_command::ExploreSystemData const> ExploreSystemDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ite_command::ExploreSystemData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ite_command::ExploreSystemData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ite_command

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ite_trajopt': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_trajopt/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ite_command': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_command/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::ExploreSystemData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::ExploreSystemData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::ExploreSystemData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::ExploreSystemData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::ExploreSystemData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::ExploreSystemData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ite_command::ExploreSystemData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a966e5115c1090ab6bcb0ea613336a66";
  }

  static const char* value(const ::ite_command::ExploreSystemData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa966e5115c1090abULL;
  static const uint64_t static_value2 = 0x6bcb0ea613336a66ULL;
};

template<class ContainerAllocator>
struct DataType< ::ite_command::ExploreSystemData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ite_command/ExploreSystemData";
  }

  static const char* value(const ::ite_command::ExploreSystemData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ite_command::ExploreSystemData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
string name # Robot's name\n\
string local_planner # Name of local planner\n\
\n\
geometry_msgs/PoseStamped pose # Robot's pose\n\
TeamActions global_actions # Last global plan\n\
\n\
InfoTraj global # Best global path\n\
InfoTraj local # Best local trajectory\n\
InfoTraj global_remainder # Local portion of global plan\n\
InfoTraj optimized # Optimized version of global_remainder or local\n\
bool optimize_local # If true, the local was optimized, otherwise global_remainder was\n\
bool select_optimize # If true, optimized was selected over global\n\
\n\
float64 optimization_duration # Time to run the SQP\n\
float64 total_duration # Total time\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: ite_command/TeamActions\n\
std_msgs/Header header\n\
string planner_type\n\
float64 duration # How long to plan (sec)\n\
\n\
RobotActions scarab\n\
RobotActions quad\n\
\n\
================================================================================\n\
MSG: ite_command/RobotActions\n\
std_msgs/String name\n\
geometry_msgs/PoseStamped pose # Robot's pose\n\
InfoPath[] paths\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: ite_command/InfoPath\n\
geometry_msgs/Pose[] poses\n\
float64 info # Information of path\n\
float64 endpose_info # Information at final pose\n\
float64 time # Time to execute path\n\
\n\
================================================================================\n\
MSG: ite_command/InfoTraj\n\
ite_trajopt/StatesControls state_controls\n\
float64 info # Information of path\n\
float64 cost # Objective function cost\n\
float64 time # Time to execute trajectory\n\
float64 info_rate \n\
float64 dynfunc_viol\n\
\n\
================================================================================\n\
MSG: ite_trajopt/StatesControls\n\
std_msgs/Header header\n\
std_msgs/Float32MultiArray[] X\n\
std_msgs/Float32MultiArray[] U\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding elements at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const ::ite_command::ExploreSystemData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ite_command::ExploreSystemData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.local_planner);
      stream.next(m.pose);
      stream.next(m.global_actions);
      stream.next(m.global);
      stream.next(m.local);
      stream.next(m.global_remainder);
      stream.next(m.optimized);
      stream.next(m.optimize_local);
      stream.next(m.select_optimize);
      stream.next(m.optimization_duration);
      stream.next(m.total_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExploreSystemData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ite_command::ExploreSystemData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ite_command::ExploreSystemData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "local_planner: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.local_planner);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "global_actions: ";
    s << std::endl;
    Printer< ::ite_command::TeamActions_<ContainerAllocator> >::stream(s, indent + "  ", v.global_actions);
    s << indent << "global: ";
    s << std::endl;
    Printer< ::ite_command::InfoTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.global);
    s << indent << "local: ";
    s << std::endl;
    Printer< ::ite_command::InfoTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.local);
    s << indent << "global_remainder: ";
    s << std::endl;
    Printer< ::ite_command::InfoTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.global_remainder);
    s << indent << "optimized: ";
    s << std::endl;
    Printer< ::ite_command::InfoTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.optimized);
    s << indent << "optimize_local: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.optimize_local);
    s << indent << "select_optimize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.select_optimize);
    s << indent << "optimization_duration: ";
    Printer<double>::stream(s, indent + "  ", v.optimization_duration);
    s << indent << "total_duration: ";
    Printer<double>::stream(s, indent + "  ", v.total_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITE_COMMAND_MESSAGE_EXPLORESYSTEMDATA_H
