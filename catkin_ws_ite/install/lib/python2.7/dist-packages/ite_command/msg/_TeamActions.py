# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ite_command/TeamActions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ite_command.msg
import geometry_msgs.msg
import std_msgs.msg

class TeamActions(genpy.Message):
  _md5sum = "a2644f81083808082cfaa9c0d038a7ce"
  _type = "ite_command/TeamActions"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
string planner_type
float64 duration # How long to plan (sec)

RobotActions scarab
RobotActions quad

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: ite_command/RobotActions
std_msgs/String name
geometry_msgs/PoseStamped pose # Robot's pose
InfoPath[] paths

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ite_command/InfoPath
geometry_msgs/Pose[] poses
float64 info # Information of path
float64 endpose_info # Information at final pose
float64 time # Time to execute path
"""
  __slots__ = ['header','planner_type','duration','scarab','quad']
  _slot_types = ['std_msgs/Header','string','float64','ite_command/RobotActions','ite_command/RobotActions']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,planner_type,duration,scarab,quad

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeamActions, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.planner_type is None:
        self.planner_type = ''
      if self.duration is None:
        self.duration = 0.
      if self.scarab is None:
        self.scarab = ite_command.msg.RobotActions()
      if self.quad is None:
        self.quad = ite_command.msg.RobotActions()
    else:
      self.header = std_msgs.msg.Header()
      self.planner_type = ''
      self.duration = 0.
      self.scarab = ite_command.msg.RobotActions()
      self.quad = ite_command.msg.RobotActions()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.planner_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.duration))
      _x = self.scarab.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.scarab.pose.header.seq, _x.scarab.pose.header.stamp.secs, _x.scarab.pose.header.stamp.nsecs))
      _x = self.scarab.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.scarab.pose.pose.position.x, _x.scarab.pose.pose.position.y, _x.scarab.pose.pose.position.z, _x.scarab.pose.pose.orientation.x, _x.scarab.pose.pose.orientation.y, _x.scarab.pose.pose.orientation.z, _x.scarab.pose.pose.orientation.w))
      length = len(self.scarab.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.scarab.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v1 = val2.position
          _x = _v1
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v2 = val2.orientation
          _x = _v2
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self.quad.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.quad.pose.header.seq, _x.quad.pose.header.stamp.secs, _x.quad.pose.header.stamp.nsecs))
      _x = self.quad.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.quad.pose.pose.position.x, _x.quad.pose.pose.position.y, _x.quad.pose.pose.position.z, _x.quad.pose.pose.orientation.x, _x.quad.pose.pose.orientation.y, _x.quad.pose.pose.orientation.z, _x.quad.pose.pose.orientation.w))
      length = len(self.quad.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.quad.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v3 = val2.position
          _x = _v3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v4 = val2.orientation
          _x = _v4
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scarab is None:
        self.scarab = ite_command.msg.RobotActions()
      if self.quad is None:
        self.quad = ite_command.msg.RobotActions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_type = str[start:end].decode('utf-8')
      else:
        self.planner_type = str[start:end]
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scarab.name.data = str[start:end].decode('utf-8')
      else:
        self.scarab.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.scarab.pose.header.seq, _x.scarab.pose.header.stamp.secs, _x.scarab.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scarab.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.scarab.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.scarab.pose.pose.position.x, _x.scarab.pose.pose.position.y, _x.scarab.pose.pose.position.z, _x.scarab.pose.pose.orientation.x, _x.scarab.pose.pose.orientation.y, _x.scarab.pose.pose.orientation.z, _x.scarab.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scarab.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v5 = val2.position
          _x = _v5
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v6 = val2.orientation
          _x = _v6
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.scarab.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quad.name.data = str[start:end].decode('utf-8')
      else:
        self.quad.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.quad.pose.header.seq, _x.quad.pose.header.stamp.secs, _x.quad.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quad.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quad.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.quad.pose.pose.position.x, _x.quad.pose.pose.position.y, _x.quad.pose.pose.position.z, _x.quad.pose.pose.orientation.x, _x.quad.pose.pose.orientation.y, _x.quad.pose.pose.orientation.z, _x.quad.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.quad.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v7 = val2.position
          _x = _v7
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v8 = val2.orientation
          _x = _v8
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.quad.paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.planner_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.duration))
      _x = self.scarab.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.scarab.pose.header.seq, _x.scarab.pose.header.stamp.secs, _x.scarab.pose.header.stamp.nsecs))
      _x = self.scarab.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.scarab.pose.pose.position.x, _x.scarab.pose.pose.position.y, _x.scarab.pose.pose.position.z, _x.scarab.pose.pose.orientation.x, _x.scarab.pose.pose.orientation.y, _x.scarab.pose.pose.orientation.z, _x.scarab.pose.pose.orientation.w))
      length = len(self.scarab.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.scarab.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v9 = val2.position
          _x = _v9
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v10 = val2.orientation
          _x = _v10
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self.quad.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.quad.pose.header.seq, _x.quad.pose.header.stamp.secs, _x.quad.pose.header.stamp.nsecs))
      _x = self.quad.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.quad.pose.pose.position.x, _x.quad.pose.pose.position.y, _x.quad.pose.pose.position.z, _x.quad.pose.pose.orientation.x, _x.quad.pose.pose.orientation.y, _x.quad.pose.pose.orientation.z, _x.quad.pose.pose.orientation.w))
      length = len(self.quad.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.quad.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v11 = val2.position
          _x = _v11
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v12 = val2.orientation
          _x = _v12
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scarab is None:
        self.scarab = ite_command.msg.RobotActions()
      if self.quad is None:
        self.quad = ite_command.msg.RobotActions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_type = str[start:end].decode('utf-8')
      else:
        self.planner_type = str[start:end]
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scarab.name.data = str[start:end].decode('utf-8')
      else:
        self.scarab.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.scarab.pose.header.seq, _x.scarab.pose.header.stamp.secs, _x.scarab.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scarab.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.scarab.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.scarab.pose.pose.position.x, _x.scarab.pose.pose.position.y, _x.scarab.pose.pose.position.z, _x.scarab.pose.pose.orientation.x, _x.scarab.pose.pose.orientation.y, _x.scarab.pose.pose.orientation.z, _x.scarab.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scarab.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v13 = val2.position
          _x = _v13
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v14 = val2.orientation
          _x = _v14
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.scarab.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quad.name.data = str[start:end].decode('utf-8')
      else:
        self.quad.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.quad.pose.header.seq, _x.quad.pose.header.stamp.secs, _x.quad.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quad.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.quad.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.quad.pose.pose.position.x, _x.quad.pose.pose.position.y, _x.quad.pose.pose.position.z, _x.quad.pose.pose.orientation.x, _x.quad.pose.pose.orientation.y, _x.quad.pose.pose.orientation.z, _x.quad.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.quad.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v15 = val2.position
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v16 = val2.orientation
          _x = _v16
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.quad.paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_d = struct.Struct("<d")
_struct_3d = struct.Struct("<3d")
