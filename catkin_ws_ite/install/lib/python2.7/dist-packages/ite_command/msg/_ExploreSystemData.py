# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ite_command/ExploreSystemData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ite_trajopt.msg
import ite_command.msg
import geometry_msgs.msg
import std_msgs.msg

class ExploreSystemData(genpy.Message):
  _md5sum = "a966e5115c1090ab6bcb0ea613336a66"
  _type = "ite_command/ExploreSystemData"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

string name # Robot's name
string local_planner # Name of local planner

geometry_msgs/PoseStamped pose # Robot's pose
TeamActions global_actions # Last global plan

InfoTraj global # Best global path
InfoTraj local # Best local trajectory
InfoTraj global_remainder # Local portion of global plan
InfoTraj optimized # Optimized version of global_remainder or local
bool optimize_local # If true, the local was optimized, otherwise global_remainder was
bool select_optimize # If true, optimized was selected over global

float64 optimization_duration # Time to run the SQP
float64 total_duration # Total time

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ite_command/TeamActions
std_msgs/Header header
string planner_type
float64 duration # How long to plan (sec)

RobotActions scarab
RobotActions quad

================================================================================
MSG: ite_command/RobotActions
std_msgs/String name
geometry_msgs/PoseStamped pose # Robot's pose
InfoPath[] paths

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: ite_command/InfoPath
geometry_msgs/Pose[] poses
float64 info # Information of path
float64 endpose_info # Information at final pose
float64 time # Time to execute path

================================================================================
MSG: ite_command/InfoTraj
ite_trajopt/StatesControls state_controls
float64 info # Information of path
float64 cost # Objective function cost
float64 time # Time to execute trajectory
float64 info_rate 
float64 dynfunc_viol

================================================================================
MSG: ite_trajopt/StatesControls
std_msgs/Header header
std_msgs/Float32MultiArray[] X
std_msgs/Float32MultiArray[] U

================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension"""
  __slots__ = ['header','name','local_planner','pose','global_actions','global_','local','global_remainder','optimized','optimize_local','select_optimize','optimization_duration','total_duration']
  _slot_types = ['std_msgs/Header','string','string','geometry_msgs/PoseStamped','ite_command/TeamActions','ite_command/InfoTraj','ite_command/InfoTraj','ite_command/InfoTraj','ite_command/InfoTraj','bool','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,name,local_planner,pose,global_actions,global_,local,global_remainder,optimized,optimize_local,select_optimize,optimization_duration,total_duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExploreSystemData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = ''
      if self.local_planner is None:
        self.local_planner = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.global_actions is None:
        self.global_actions = ite_command.msg.TeamActions()
      if self.global_ is None:
        self.global_ = ite_command.msg.InfoTraj()
      if self.local is None:
        self.local = ite_command.msg.InfoTraj()
      if self.global_remainder is None:
        self.global_remainder = ite_command.msg.InfoTraj()
      if self.optimized is None:
        self.optimized = ite_command.msg.InfoTraj()
      if self.optimize_local is None:
        self.optimize_local = False
      if self.select_optimize is None:
        self.select_optimize = False
      if self.optimization_duration is None:
        self.optimization_duration = 0.
      if self.total_duration is None:
        self.total_duration = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.name = ''
      self.local_planner = ''
      self.pose = geometry_msgs.msg.PoseStamped()
      self.global_actions = ite_command.msg.TeamActions()
      self.global_ = ite_command.msg.InfoTraj()
      self.local = ite_command.msg.InfoTraj()
      self.global_remainder = ite_command.msg.InfoTraj()
      self.optimized = ite_command.msg.InfoTraj()
      self.optimize_local = False
      self.select_optimize = False
      self.optimization_duration = 0.
      self.total_duration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.global_actions.header.seq, _x.global_actions.header.stamp.secs, _x.global_actions.header.stamp.nsecs))
      _x = self.global_actions.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.global_actions.planner_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.global_actions.duration))
      _x = self.global_actions.scarab.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.global_actions.scarab.pose.header.seq, _x.global_actions.scarab.pose.header.stamp.secs, _x.global_actions.scarab.pose.header.stamp.nsecs))
      _x = self.global_actions.scarab.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.global_actions.scarab.pose.pose.position.x, _x.global_actions.scarab.pose.pose.position.y, _x.global_actions.scarab.pose.pose.position.z, _x.global_actions.scarab.pose.pose.orientation.x, _x.global_actions.scarab.pose.pose.orientation.y, _x.global_actions.scarab.pose.pose.orientation.z, _x.global_actions.scarab.pose.pose.orientation.w))
      length = len(self.global_actions.scarab.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_actions.scarab.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v1 = val2.position
          _x = _v1
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v2 = val2.orientation
          _x = _v2
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self.global_actions.quad.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.global_actions.quad.pose.header.seq, _x.global_actions.quad.pose.header.stamp.secs, _x.global_actions.quad.pose.header.stamp.nsecs))
      _x = self.global_actions.quad.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.global_actions.quad.pose.pose.position.x, _x.global_actions.quad.pose.pose.position.y, _x.global_actions.quad.pose.pose.position.z, _x.global_actions.quad.pose.pose.orientation.x, _x.global_actions.quad.pose.pose.orientation.y, _x.global_actions.quad.pose.pose.orientation.z, _x.global_actions.quad.pose.pose.orientation.w))
      length = len(self.global_actions.quad.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_actions.quad.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v3 = val2.position
          _x = _v3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v4 = val2.orientation
          _x = _v4
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self
      buff.write(_struct_3I.pack(_x.global_.state_controls.header.seq, _x.global_.state_controls.header.stamp.secs, _x.global_.state_controls.header.stamp.nsecs))
      _x = self.global_.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.global_.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_.state_controls.X:
        _v5 = val1.layout
        length = len(_v5.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v5.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v5.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.global_.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_.state_controls.U:
        _v6 = val1.layout
        length = len(_v6.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v6.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v6.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      _x = self
      buff.write(_struct_5d3I.pack(_x.global_.info, _x.global_.cost, _x.global_.time, _x.global_.info_rate, _x.global_.dynfunc_viol, _x.local.state_controls.header.seq, _x.local.state_controls.header.stamp.secs, _x.local.state_controls.header.stamp.nsecs))
      _x = self.local.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.local.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.local.state_controls.X:
        _v7 = val1.layout
        length = len(_v7.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v7.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.local.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.local.state_controls.U:
        _v8 = val1.layout
        length = len(_v8.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v8.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      _x = self
      buff.write(_struct_5d3I.pack(_x.local.info, _x.local.cost, _x.local.time, _x.local.info_rate, _x.local.dynfunc_viol, _x.global_remainder.state_controls.header.seq, _x.global_remainder.state_controls.header.stamp.secs, _x.global_remainder.state_controls.header.stamp.nsecs))
      _x = self.global_remainder.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.global_remainder.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_remainder.state_controls.X:
        _v9 = val1.layout
        length = len(_v9.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v9.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.global_remainder.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_remainder.state_controls.U:
        _v10 = val1.layout
        length = len(_v10.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v10.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v10.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      _x = self
      buff.write(_struct_5d3I.pack(_x.global_remainder.info, _x.global_remainder.cost, _x.global_remainder.time, _x.global_remainder.info_rate, _x.global_remainder.dynfunc_viol, _x.optimized.state_controls.header.seq, _x.optimized.state_controls.header.stamp.secs, _x.optimized.state_controls.header.stamp.nsecs))
      _x = self.optimized.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.optimized.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimized.state_controls.X:
        _v11 = val1.layout
        length = len(_v11.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v11.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      length = len(self.optimized.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimized.state_controls.U:
        _v12 = val1.layout
        length = len(_v12.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v12.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.data))
      _x = self
      buff.write(_struct_5d2B2d.pack(_x.optimized.info, _x.optimized.cost, _x.optimized.time, _x.optimized.info_rate, _x.optimized.dynfunc_viol, _x.optimize_local, _x.select_optimize, _x.optimization_duration, _x.total_duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.global_actions is None:
        self.global_actions = ite_command.msg.TeamActions()
      if self.global_ is None:
        self.global_ = ite_command.msg.InfoTraj()
      if self.local is None:
        self.local = ite_command.msg.InfoTraj()
      if self.global_remainder is None:
        self.global_remainder = ite_command.msg.InfoTraj()
      if self.optimized is None:
        self.optimized = ite_command.msg.InfoTraj()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.global_actions.header.seq, _x.global_actions.header.stamp.secs, _x.global_actions.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.planner_type = str[start:end].decode('utf-8')
      else:
        self.global_actions.planner_type = str[start:end]
      start = end
      end += 8
      (self.global_actions.duration,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.scarab.name.data = str[start:end].decode('utf-8')
      else:
        self.global_actions.scarab.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_actions.scarab.pose.header.seq, _x.global_actions.scarab.pose.header.stamp.secs, _x.global_actions.scarab.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.scarab.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.scarab.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.global_actions.scarab.pose.pose.position.x, _x.global_actions.scarab.pose.pose.position.y, _x.global_actions.scarab.pose.pose.position.z, _x.global_actions.scarab.pose.pose.orientation.x, _x.global_actions.scarab.pose.pose.orientation.y, _x.global_actions.scarab.pose.pose.orientation.z, _x.global_actions.scarab.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_actions.scarab.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v13 = val2.position
          _x = _v13
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v14 = val2.orientation
          _x = _v14
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.global_actions.scarab.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.quad.name.data = str[start:end].decode('utf-8')
      else:
        self.global_actions.quad.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_actions.quad.pose.header.seq, _x.global_actions.quad.pose.header.stamp.secs, _x.global_actions.quad.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.quad.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.quad.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.global_actions.quad.pose.pose.position.x, _x.global_actions.quad.pose.pose.position.y, _x.global_actions.quad.pose.pose.position.z, _x.global_actions.quad.pose.pose.orientation.x, _x.global_actions.quad.pose.pose.orientation.y, _x.global_actions.quad.pose.pose.orientation.z, _x.global_actions.quad.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_actions.quad.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v15 = val2.position
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v16 = val2.orientation
          _x = _v16
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.global_actions.quad.paths.append(val1)
      _x = self
      start = end
      end += 12
      (_x.global_.state_controls.header.seq, _x.global_.state_controls.header.stamp.secs, _x.global_.state_controls.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v17 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v17.dim.append(val3)
        start = end
        end += 4
        (_v17.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.global_.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v18 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v18.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v18.dim.append(val3)
        start = end
        end += 4
        (_v18.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.global_.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.global_.info, _x.global_.cost, _x.global_.time, _x.global_.info_rate, _x.global_.dynfunc_viol, _x.local.state_controls.header.seq, _x.local.state_controls.header.stamp.secs, _x.local.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.local.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v19 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v19.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v19.dim.append(val3)
        start = end
        end += 4
        (_v19.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.local.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v20 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v20.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v20.dim.append(val3)
        start = end
        end += 4
        (_v20.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.local.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.local.info, _x.local.cost, _x.local.time, _x.local.info_rate, _x.local.dynfunc_viol, _x.global_remainder.state_controls.header.seq, _x.global_remainder.state_controls.header.stamp.secs, _x.global_remainder.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_remainder.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_remainder.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_remainder.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v21 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v21.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v21.dim.append(val3)
        start = end
        end += 4
        (_v21.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.global_remainder.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_remainder.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v22 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v22.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v22.dim.append(val3)
        start = end
        end += 4
        (_v22.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.global_remainder.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.global_remainder.info, _x.global_remainder.cost, _x.global_remainder.time, _x.global_remainder.info_rate, _x.global_remainder.dynfunc_viol, _x.optimized.state_controls.header.seq, _x.optimized.state_controls.header.stamp.secs, _x.optimized.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimized.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.optimized.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimized.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v23 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v23.dim.append(val3)
        start = end
        end += 4
        (_v23.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.optimized.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimized.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v24 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v24.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v24.dim.append(val3)
        start = end
        end += 4
        (_v24.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.optimized.state_controls.U.append(val1)
      _x = self
      start = end
      end += 58
      (_x.optimized.info, _x.optimized.cost, _x.optimized.time, _x.optimized.info_rate, _x.optimized.dynfunc_viol, _x.optimize_local, _x.select_optimize, _x.optimization_duration, _x.total_duration,) = _struct_5d2B2d.unpack(str[start:end])
      self.optimize_local = bool(self.optimize_local)
      self.select_optimize = bool(self.select_optimize)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.local_planner
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.global_actions.header.seq, _x.global_actions.header.stamp.secs, _x.global_actions.header.stamp.nsecs))
      _x = self.global_actions.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.global_actions.planner_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.global_actions.duration))
      _x = self.global_actions.scarab.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.global_actions.scarab.pose.header.seq, _x.global_actions.scarab.pose.header.stamp.secs, _x.global_actions.scarab.pose.header.stamp.nsecs))
      _x = self.global_actions.scarab.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.global_actions.scarab.pose.pose.position.x, _x.global_actions.scarab.pose.pose.position.y, _x.global_actions.scarab.pose.pose.position.z, _x.global_actions.scarab.pose.pose.orientation.x, _x.global_actions.scarab.pose.pose.orientation.y, _x.global_actions.scarab.pose.pose.orientation.z, _x.global_actions.scarab.pose.pose.orientation.w))
      length = len(self.global_actions.scarab.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_actions.scarab.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v25 = val2.position
          _x = _v25
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v26 = val2.orientation
          _x = _v26
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self.global_actions.quad.name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.global_actions.quad.pose.header.seq, _x.global_actions.quad.pose.header.stamp.secs, _x.global_actions.quad.pose.header.stamp.nsecs))
      _x = self.global_actions.quad.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.global_actions.quad.pose.pose.position.x, _x.global_actions.quad.pose.pose.position.y, _x.global_actions.quad.pose.pose.position.z, _x.global_actions.quad.pose.pose.orientation.x, _x.global_actions.quad.pose.pose.orientation.y, _x.global_actions.quad.pose.pose.orientation.z, _x.global_actions.quad.pose.pose.orientation.w))
      length = len(self.global_actions.quad.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_actions.quad.paths:
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v27 = val2.position
          _x = _v27
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v28 = val2.orientation
          _x = _v28
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_3d.pack(_x.info, _x.endpose_info, _x.time))
      _x = self
      buff.write(_struct_3I.pack(_x.global_.state_controls.header.seq, _x.global_.state_controls.header.stamp.secs, _x.global_.state_controls.header.stamp.nsecs))
      _x = self.global_.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.global_.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_.state_controls.X:
        _v29 = val1.layout
        length = len(_v29.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v29.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v29.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.global_.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_.state_controls.U:
        _v30 = val1.layout
        length = len(_v30.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v30.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v30.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      _x = self
      buff.write(_struct_5d3I.pack(_x.global_.info, _x.global_.cost, _x.global_.time, _x.global_.info_rate, _x.global_.dynfunc_viol, _x.local.state_controls.header.seq, _x.local.state_controls.header.stamp.secs, _x.local.state_controls.header.stamp.nsecs))
      _x = self.local.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.local.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.local.state_controls.X:
        _v31 = val1.layout
        length = len(_v31.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v31.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v31.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.local.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.local.state_controls.U:
        _v32 = val1.layout
        length = len(_v32.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v32.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v32.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      _x = self
      buff.write(_struct_5d3I.pack(_x.local.info, _x.local.cost, _x.local.time, _x.local.info_rate, _x.local.dynfunc_viol, _x.global_remainder.state_controls.header.seq, _x.global_remainder.state_controls.header.stamp.secs, _x.global_remainder.state_controls.header.stamp.nsecs))
      _x = self.global_remainder.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.global_remainder.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_remainder.state_controls.X:
        _v33 = val1.layout
        length = len(_v33.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v33.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v33.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.global_remainder.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.global_remainder.state_controls.U:
        _v34 = val1.layout
        length = len(_v34.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v34.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v34.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      _x = self
      buff.write(_struct_5d3I.pack(_x.global_remainder.info, _x.global_remainder.cost, _x.global_remainder.time, _x.global_remainder.info_rate, _x.global_remainder.dynfunc_viol, _x.optimized.state_controls.header.seq, _x.optimized.state_controls.header.stamp.secs, _x.optimized.state_controls.header.stamp.nsecs))
      _x = self.optimized.state_controls.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.optimized.state_controls.X)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimized.state_controls.X:
        _v35 = val1.layout
        length = len(_v35.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v35.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v35.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      length = len(self.optimized.state_controls.U)
      buff.write(_struct_I.pack(length))
      for val1 in self.optimized.state_controls.U:
        _v36 = val1.layout
        length = len(_v36.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v36.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_2I.pack(_x.size, _x.stride))
        buff.write(_struct_I.pack(_v36.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.data.tostring())
      _x = self
      buff.write(_struct_5d2B2d.pack(_x.optimized.info, _x.optimized.cost, _x.optimized.time, _x.optimized.info_rate, _x.optimized.dynfunc_viol, _x.optimize_local, _x.select_optimize, _x.optimization_duration, _x.total_duration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.global_actions is None:
        self.global_actions = ite_command.msg.TeamActions()
      if self.global_ is None:
        self.global_ = ite_command.msg.InfoTraj()
      if self.local is None:
        self.local = ite_command.msg.InfoTraj()
      if self.global_remainder is None:
        self.global_remainder = ite_command.msg.InfoTraj()
      if self.optimized is None:
        self.optimized = ite_command.msg.InfoTraj()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local_planner = str[start:end].decode('utf-8')
      else:
        self.local_planner = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.global_actions.header.seq, _x.global_actions.header.stamp.secs, _x.global_actions.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.planner_type = str[start:end].decode('utf-8')
      else:
        self.global_actions.planner_type = str[start:end]
      start = end
      end += 8
      (self.global_actions.duration,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.scarab.name.data = str[start:end].decode('utf-8')
      else:
        self.global_actions.scarab.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_actions.scarab.pose.header.seq, _x.global_actions.scarab.pose.header.stamp.secs, _x.global_actions.scarab.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.scarab.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.scarab.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.global_actions.scarab.pose.pose.position.x, _x.global_actions.scarab.pose.pose.position.y, _x.global_actions.scarab.pose.pose.position.z, _x.global_actions.scarab.pose.pose.orientation.x, _x.global_actions.scarab.pose.pose.orientation.y, _x.global_actions.scarab.pose.pose.orientation.z, _x.global_actions.scarab.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_actions.scarab.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v37 = val2.position
          _x = _v37
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v38 = val2.orientation
          _x = _v38
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.global_actions.scarab.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.quad.name.data = str[start:end].decode('utf-8')
      else:
        self.global_actions.quad.name.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.global_actions.quad.pose.header.seq, _x.global_actions.quad.pose.header.stamp.secs, _x.global_actions.quad.pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_actions.quad.pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_actions.quad.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.global_actions.quad.pose.pose.position.x, _x.global_actions.quad.pose.pose.position.y, _x.global_actions.quad.pose.pose.position.z, _x.global_actions.quad.pose.pose.orientation.x, _x.global_actions.quad.pose.pose.orientation.y, _x.global_actions.quad.pose.pose.orientation.z, _x.global_actions.quad.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_actions.quad.paths = []
      for i in range(0, length):
        val1 = ite_command.msg.InfoPath()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v39 = val2.position
          _x = _v39
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v40 = val2.orientation
          _x = _v40
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        _x = val1
        start = end
        end += 24
        (_x.info, _x.endpose_info, _x.time,) = _struct_3d.unpack(str[start:end])
        self.global_actions.quad.paths.append(val1)
      _x = self
      start = end
      end += 12
      (_x.global_.state_controls.header.seq, _x.global_.state_controls.header.stamp.secs, _x.global_.state_controls.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v41 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v41.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v41.dim.append(val3)
        start = end
        end += 4
        (_v41.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.global_.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v42 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v42.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v42.dim.append(val3)
        start = end
        end += 4
        (_v42.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.global_.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.global_.info, _x.global_.cost, _x.global_.time, _x.global_.info_rate, _x.global_.dynfunc_viol, _x.local.state_controls.header.seq, _x.local.state_controls.header.stamp.secs, _x.local.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.local.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.local.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v43 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v43.dim.append(val3)
        start = end
        end += 4
        (_v43.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.local.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.local.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v44 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v44.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v44.dim.append(val3)
        start = end
        end += 4
        (_v44.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.local.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.local.info, _x.local.cost, _x.local.time, _x.local.info_rate, _x.local.dynfunc_viol, _x.global_remainder.state_controls.header.seq, _x.global_remainder.state_controls.header.stamp.secs, _x.global_remainder.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.global_remainder.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.global_remainder.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_remainder.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v45 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v45.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v45.dim.append(val3)
        start = end
        end += 4
        (_v45.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.global_remainder.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.global_remainder.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v46 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v46.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v46.dim.append(val3)
        start = end
        end += 4
        (_v46.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.global_remainder.state_controls.U.append(val1)
      _x = self
      start = end
      end += 52
      (_x.global_remainder.info, _x.global_remainder.cost, _x.global_remainder.time, _x.global_remainder.info_rate, _x.global_remainder.dynfunc_viol, _x.optimized.state_controls.header.seq, _x.optimized.state_controls.header.stamp.secs, _x.optimized.state_controls.header.stamp.nsecs,) = _struct_5d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.optimized.state_controls.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.optimized.state_controls.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimized.state_controls.X = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v47 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v47.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v47.dim.append(val3)
        start = end
        end += 4
        (_v47.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.optimized.state_controls.X.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.optimized.state_controls.U = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32MultiArray()
        _v48 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v48.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _struct_2I.unpack(str[start:end])
          _v48.dim.append(val3)
        start = end
        end += 4
        (_v48.data_offset,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.optimized.state_controls.U.append(val1)
      _x = self
      start = end
      end += 58
      (_x.optimized.info, _x.optimized.cost, _x.optimized.time, _x.optimized.info_rate, _x.optimized.dynfunc_viol, _x.optimize_local, _x.select_optimize, _x.optimization_duration, _x.total_duration,) = _struct_5d2B2d.unpack(str[start:end])
      self.optimize_local = bool(self.optimize_local)
      self.select_optimize = bool(self.select_optimize)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
_struct_d = struct.Struct("<d")
_struct_5d3I = struct.Struct("<5d3I")
_struct_2I = struct.Struct("<2I")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_5d2B2d = struct.Struct("<5d2B2d")
_struct_7d3I = struct.Struct("<7d3I")
_struct_3d = struct.Struct("<3d")
