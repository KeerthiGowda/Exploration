// Generated by gencpp from file ite_command/PlanData.msg
// DO NOT EDIT!


#ifndef ITE_COMMAND_MESSAGE_PLANDATA_H
#define ITE_COMMAND_MESSAGE_PLANDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ite_command/TrajectoryData.h>

namespace ite_command
{
template <class ContainerAllocator>
struct PlanData_
{
  typedef PlanData_<ContainerAllocator> Type;

  PlanData_()
    : header()
    , planner_type()
    , duration(0.0)
    , lethal_occ_dist(0.0)
    , num_angles(0)
    , eval_res(0.0)
    , min_info(0.0)
    , min_ttl_info(0.0)
    , max_seg_length(0.0)
    , max_seg_angle(0.0)
    , min_distance(0.0)
    , max_distance(0.0)
    , trajectories()  {
    }
  PlanData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , planner_type(_alloc)
    , duration(0.0)
    , lethal_occ_dist(0.0)
    , num_angles(0)
    , eval_res(0.0)
    , min_info(0.0)
    , min_ttl_info(0.0)
    , max_seg_length(0.0)
    , max_seg_angle(0.0)
    , min_distance(0.0)
    , max_distance(0.0)
    , trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planner_type_type;
  _planner_type_type planner_type;

   typedef double _duration_type;
  _duration_type duration;

   typedef double _lethal_occ_dist_type;
  _lethal_occ_dist_type lethal_occ_dist;

   typedef int64_t _num_angles_type;
  _num_angles_type num_angles;

   typedef double _eval_res_type;
  _eval_res_type eval_res;

   typedef double _min_info_type;
  _min_info_type min_info;

   typedef double _min_ttl_info_type;
  _min_ttl_info_type min_ttl_info;

   typedef double _max_seg_length_type;
  _max_seg_length_type max_seg_length;

   typedef double _max_seg_angle_type;
  _max_seg_angle_type max_seg_angle;

   typedef double _min_distance_type;
  _min_distance_type min_distance;

   typedef double _max_distance_type;
  _max_distance_type max_distance;

   typedef std::vector< ::ite_command::TrajectoryData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ite_command::TrajectoryData_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;




  typedef boost::shared_ptr< ::ite_command::PlanData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ite_command::PlanData_<ContainerAllocator> const> ConstPtr;

}; // struct PlanData_

typedef ::ite_command::PlanData_<std::allocator<void> > PlanData;

typedef boost::shared_ptr< ::ite_command::PlanData > PlanDataPtr;
typedef boost::shared_ptr< ::ite_command::PlanData const> PlanDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ite_command::PlanData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ite_command::PlanData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ite_command

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ite_trajopt': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_trajopt/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ite_command': ['/home/aravind/catkin_ws_ite/src/ite_core/ite_command/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::PlanData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ite_command::PlanData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::PlanData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ite_command::PlanData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::PlanData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ite_command::PlanData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ite_command::PlanData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67d65d37a8c6e26d680a2ee5641e5b2f";
  }

  static const char* value(const ::ite_command::PlanData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67d65d37a8c6e26dULL;
  static const uint64_t static_value2 = 0x680a2ee5641e5b2fULL;
};

template<class ContainerAllocator>
struct DataType< ::ite_command::PlanData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ite_command/PlanData";
  }

  static const char* value(const ::ite_command::PlanData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ite_command::PlanData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header # Contains plan number and planning start time\n\
string planner_type\n\
float64 duration       # How long to plan (sec)\n\
\n\
# Plan parameters used by InfoPlanner\n\
float64 lethal_occ_dist\n\
int64 num_angles\n\
float64 eval_res\n\
float64 min_info\n\
float64 min_ttl_info\n\
float64 max_seg_length\n\
float64 max_seg_angle\n\
\n\
float64 min_distance   # Minimum distance used to make trajectories\n\
float64 max_distance   # Maximum distance used to make trajectories\n\
\n\
# Trajectories\n\
ite_command/TrajectoryData[] trajectories\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ite_command/TrajectoryData\n\
geometry_msgs/Pose[] robot_poses\n\
geometry_msgs/Pose[] sensor_poses\n\
float64 total_info\n\
float64[] infos # Information\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ite_command::PlanData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ite_command::PlanData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.planner_type);
      stream.next(m.duration);
      stream.next(m.lethal_occ_dist);
      stream.next(m.num_angles);
      stream.next(m.eval_res);
      stream.next(m.min_info);
      stream.next(m.min_ttl_info);
      stream.next(m.max_seg_length);
      stream.next(m.max_seg_angle);
      stream.next(m.min_distance);
      stream.next(m.max_distance);
      stream.next(m.trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ite_command::PlanData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ite_command::PlanData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "planner_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planner_type);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "lethal_occ_dist: ";
    Printer<double>::stream(s, indent + "  ", v.lethal_occ_dist);
    s << indent << "num_angles: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_angles);
    s << indent << "eval_res: ";
    Printer<double>::stream(s, indent + "  ", v.eval_res);
    s << indent << "min_info: ";
    Printer<double>::stream(s, indent + "  ", v.min_info);
    s << indent << "min_ttl_info: ";
    Printer<double>::stream(s, indent + "  ", v.min_ttl_info);
    s << indent << "max_seg_length: ";
    Printer<double>::stream(s, indent + "  ", v.max_seg_length);
    s << indent << "max_seg_angle: ";
    Printer<double>::stream(s, indent + "  ", v.max_seg_angle);
    s << indent << "min_distance: ";
    Printer<double>::stream(s, indent + "  ", v.min_distance);
    s << indent << "max_distance: ";
    Printer<double>::stream(s, indent + "  ", v.max_distance);
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ite_command::TrajectoryData_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ITE_COMMAND_MESSAGE_PLANDATA_H
